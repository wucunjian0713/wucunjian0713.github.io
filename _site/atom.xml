<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-18T14:16:17+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">猛虎射东风的博客园</title><author><name>WuCunJian</name></author><entry><title type="html">ClickHouse初始</title><link href="http://localhost:4000/%E6%95%B0%E6%8D%AE%E5%BA%93/2022/02/17/ClickHouse%E5%88%9D%E8%AF%86/" rel="alternate" type="text/html" title="ClickHouse初始" /><published>2022-02-17T00:00:00+08:00</published><updated>2022-02-17T00:00:00+08:00</updated><id>http://localhost:4000/%E6%95%B0%E6%8D%AE%E5%BA%93/2022/02/17/ClickHouse%E5%88%9D%E8%AF%86</id><content type="html" xml:base="http://localhost:4000/%E6%95%B0%E6%8D%AE%E5%BA%93/2022/02/17/ClickHouse%E5%88%9D%E8%AF%86/">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClickHouse&lt;/code&gt;是一个用于联机分析 (&lt;code class=&quot;highlighter-rouge&quot;&gt;OLAP&lt;/code&gt;) 的列式数据库管理系统 (&lt;code class=&quot;highlighter-rouge&quot;&gt;DBMS&lt;/code&gt;). 由俄罗斯搜索引擎巨头 Yandex 开源. 主要用于数据分析领域, 目前国内社区火热, 各个大厂纷纷跟进大规模用于 OLAP 领域。&lt;/p&gt;

&lt;h2 id=&quot;clickhouse简介&quot;&gt;ClickHouse简介&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClickHouse&lt;/code&gt;是一个用于联机分析 (&lt;code class=&quot;highlighter-rouge&quot;&gt;OLAP&lt;/code&gt;) 的列式数据库管理系统 (&lt;code class=&quot;highlighter-rouge&quot;&gt;DBMS&lt;/code&gt;). 由俄罗斯搜索引擎巨头 Yandex 开源. 主要用于数据分析领域, 目前国内社区火热, 各个大厂纷纷跟进大规模用于 OLAP 领域。&lt;/p&gt;

&lt;p&gt;ClickHouse官网上面介绍的特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;快速&lt;/strong&gt;：ClickHouse会充分利用所有可用的硬件，以尽可能快地处理每个查询。单个查询的峰值处理性能超过每秒 2 TB（解压缩后，仅使用的列）。在分布式设置中，读取是在健康副本之间自动平衡的，以避免增加延迟。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;容错&lt;/strong&gt;：ClickHouse支持多主机异步复制，并且可以跨多个数据中心进行部署。所有节点都相等，这可以避免出现单点故障。单个节点或整个数据中心的停机时间不会影响系统的读写可用性。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;可伸缩&lt;/strong&gt;：ClickHouse可以在垂直和水平方向上很好地缩放。 ClickHouse易于调整以在具有数百或数千个节点的群集上或在单个服务器上，甚至在小型虚拟机上执行。当前，每个单节点安装的数据量超过数万亿行或数百兆兆字节。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;易用&lt;/strong&gt;：ClickHouse简单易用，开箱即用。它简化了所有数据处理：将所有结构化数据吸收到系统中，并且立即可用于构建报告。 SQL允许表达期望的结果，而无需涉及某些DBMS中可以找到的任何自定义非标准API。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;clickhouse安装教程&quot;&gt;ClickHouse安装教程&lt;/h2&gt;

&lt;p&gt;ClickHouse 可以在任何具有 x86_64 ，AArch64 或 PowerPC64LE CPU 架构的 Linux ，FreeBSD 或 Mac OS X 上运行。貌似不能在 Windows 系统下安装，不过 ClickHouse 同样支持 Docker 部署，Windows 系统可以在 Docker 下安装 ClickHouse 。&lt;/p&gt;

&lt;p&gt;下面以CentOS系统为例，以rpm方式来安装ClickHouse。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看系统版本&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@master ~]# more /etc/redhat-release 
CentOS Linux release 7.9.2009 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Core&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 检测当前CPU是否支持SSE 4.2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@master ~]# &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; sse4_2 /proc/cpuinfo &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SSE 4.2 supported&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SSE 4.2 not supported&quot;&lt;/span&gt;
SSE 4.2 supported

&lt;span class=&quot;c&quot;&gt;# 添加官方存储库&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum install yum-utils
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rpm &lt;span class=&quot;nt&quot;&gt;--import&lt;/span&gt; https://repo.clickhouse.tech/CLICKHOUSE-KEY.GPG
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum-config-manager &lt;span class=&quot;nt&quot;&gt;--add-repo&lt;/span&gt; https://repo.clickhouse.tech/rpm/stable/x86_64

&lt;span class=&quot;c&quot;&gt;# 安装clickhouse&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum install clickhouse-server clickhouse-client

&lt;span class=&quot;c&quot;&gt;# 启动clickhouse&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /etc/init.d/clickhouse-server start

&lt;span class=&quot;c&quot;&gt;# 进入clickhouse客户端&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@master ~]# clickhouse-client
ClickHouse client version 21.12.3.32 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;official build&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Connecting to localhost:9000 as user default.
Connected to ClickHouse server version 21.12.3 revision 54452.

&lt;span class=&quot;c&quot;&gt;# 开启远程连接&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>WuCunJian</name></author><summary type="html">ClickHouse是一个用于联机分析 (OLAP) 的列式数据库管理系统 (DBMS). 由俄罗斯搜索引擎巨头 Yandex 开源. 主要用于数据分析领域, 目前国内社区火热, 各个大厂纷纷跟进大规模用于 OLAP 领域。</summary></entry><entry><title type="html">HBase简介与安装</title><link href="http://localhost:4000/%E6%95%B0%E6%8D%AE%E5%BA%93/2022/01/30/HBase%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/" rel="alternate" type="text/html" title="HBase简介与安装" /><published>2022-01-30T00:00:00+08:00</published><updated>2022-01-30T00:00:00+08:00</updated><id>http://localhost:4000/%E6%95%B0%E6%8D%AE%E5%BA%93/2022/01/30/HBase%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85</id><content type="html" xml:base="http://localhost:4000/%E6%95%B0%E6%8D%AE%E5%BA%93/2022/01/30/HBase%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HBase&lt;/code&gt; 是 BigTable 的开源（源码使用 Java 编写）版本。是 Apache Hadoop 的数据库，是建立在 HDFS 之上，被设计用来提供&lt;code class=&quot;highlighter-rouge&quot;&gt;高可靠性&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;高性能&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;列存储&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;可伸缩&lt;/code&gt;、多版本的 &lt;code class=&quot;highlighter-rouge&quot;&gt;NoSQL&lt;/code&gt; 的分布式数据存储系统，实现对大型数据的实时、随机的读写访问。&lt;/p&gt;

&lt;h2 id=&quot;产生背景&quot;&gt;产生背景&lt;/h2&gt;

&lt;p&gt;自 1970 年以来，关系数据库用于数据存储和维护有关问题的解决方案。大数据的出现后， 好多公司实现处理大数据并从中受益，并开始选择像 Hadoop 的解决方案。Hadoop 使用分 布式文件系统，用于存储大数据，并使用 MapReduce 来处理。Hadoop 擅长于存储各种格式 的庞大的数据，任意的格式甚至非结构化的处理。&lt;/p&gt;

&lt;h3 id=&quot;hadoop-的限制&quot;&gt;Hadoop 的限制&lt;/h3&gt;

&lt;p&gt;Hadoop 只能执行批量处理，并且只以顺序方式访问数据。这意味着必须搜索整个数据集， 即使是最简单的搜索工作。 当处理结果在另一个庞大的数据集，也是按顺序处理一个巨大的数据集。在这一点上，一个 新的解决方案，需要访问数据中的任何点（随机访问）单元。&lt;/p&gt;

&lt;p&gt;Hadoop 随机存取数据库&lt;/p&gt;

&lt;p&gt;应用程序，如 HBase，Cassandra，CouchDB，Dynamo 和 MongoDB 都是一些存储大量数据和 以随机方式访问数据的数据库。&lt;/p&gt;

&lt;p&gt;总结：&lt;/p&gt;

&lt;p&gt;（1）海量数据量存储成为瓶颈，单台机器无法负载大量数据&lt;/p&gt;

&lt;p&gt;（2）单台机器 IO 读写请求成为海量数据存储时候高并发大规模请求的瓶颈&lt;/p&gt;

&lt;p&gt;（3）随着数据规模越来越大，大量业务场景开始考虑数据存储横向水平扩展，使得存储服 务可以增加/删除，而目前的关系型数据库更专注于一台机器&lt;/p&gt;

&lt;h2 id=&quot;hbase简介&quot;&gt;HBase简介&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;HBase 是 BigTable 的开源（源码使用 Java 编写）版本。是 Apache Hadoop 的数据库，是建 立在 HDFS 之上，被设计用来提供高可靠性、高性能、列存储、可伸缩、多版本的 NoSQL 的分布式数据存储系统，实现对大型数据的实时、随机的读写访问。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HBase 依赖于 HDFS 做底层的数据存储，BigTable 依赖 Google GFS 做数据存储&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HBase 依赖于 MapReduce 做数据计算，BigTable 依赖 Google MapReduce 做数据计算&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HBase 依赖于 ZooKeeper 做服务协调，BigTable 依赖 Google Chubby 做服务协调&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;NoSQL = NO SQL&lt;/p&gt;

&lt;p&gt;NoSQL = Not Only SQL：会有一些把 NoSQL 数据的原生查询语句封装成 SQL，比如 HBase 就有 Phoenix 工具&lt;/p&gt;

&lt;h2 id=&quot;常见关系型和非关系数据库&quot;&gt;常见关系型和非关系数据库&lt;/h2&gt;

&lt;p&gt;NoSQL:hbase,redis,mongodb&lt;/p&gt;

&lt;p&gt;RDBMS:mysql,oracle,sql server,db2&lt;/p&gt;

&lt;h2 id=&quot;hbase数据库的要点&quot;&gt;HBase数据库的要点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;它介于NoSQL和RDBMS之间，仅能通过主键(rowkey)和主键的range来检索数据&lt;/li&gt;
  &lt;li&gt;Hbase查询数据功能很简单，不支持join等复杂操作&lt;/li&gt;
  &lt;li&gt;不支持复杂的事务，只支持行级事务（可通过hive支持来实现对表join等复杂操作）。&lt;/li&gt;
  &lt;li&gt;HBase中支持的数据类型：byte[]（底层所有数据的存储都是字节数组）&lt;/li&gt;
  &lt;li&gt;主要用来存储结构化和半结构化的松散数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;结构化半结构化和半结构化&quot;&gt;结构化,半结构化和半结构化&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;结构化&lt;/strong&gt;：数据结构字段含义确定，清晰，典型的如数据库中的表结构&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;半结构化&lt;/strong&gt;：具有一定结构，但语义不够确定，典型的如 HTML 网页，有些字段是确定的(title)， 有些不确定(table)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;非结构化&lt;/strong&gt;：杂乱无章的数据，很难按照一个概念去进行抽取，无规律性&lt;/p&gt;

&lt;p&gt;与 Hadoop 一样，HBase 目标主要依靠横向扩展，通过不断增加廉价的商用服务器，来增加 计算和存储能力。&lt;/p&gt;

&lt;h2 id=&quot;hbase中的表特点&quot;&gt;HBase中的表特点&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;大：&lt;/strong&gt;一个表可以有上十亿行，上百亿列&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;面向列：&lt;/strong&gt;面向列(族)的存储和权限控制，列(族)独立索引&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;稀疏：&lt;/strong&gt;对于为空(null)的列，并不占用存储空间，因此，表可以设计的非常稀疏&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;无模式：&lt;/strong&gt;每行都有一个可排序的主键和任意多的列，列可以根据需要动态的增加，同一 张表中不同的行可以有截然不同的列&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;hbase表结构的逻辑视图&quot;&gt;Hbase表结构的逻辑视图&lt;/h2&gt;

&lt;h3 id=&quot;名词概念&quot;&gt;&lt;strong&gt;名词概念&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210922101341529.png&quot; alt=&quot;image-20210922101341529&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rowkey的概念&quot;&gt;&lt;strong&gt;Rowkey的概念&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Rowkey的概念和mysql中的主键是完全一样的，Hbase使用Rowkey来唯一的区分某一行的数据。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于Hbase只支持3中查询方式：&lt;/p&gt;

&lt;p&gt;1、基于Rowkey的单行查询&lt;/p&gt;

&lt;p&gt;2、基于Rowkey的范围扫描&lt;/p&gt;

&lt;p&gt;3、全表扫描&lt;/p&gt;

&lt;p&gt;因此，Rowkey对Hbase的性能影响非常大，Rowkey的设计就显得尤为的重要。设计的时候要兼顾基于Rowkey的单行查询也要键入Rowkey的范围扫描。具体Rowkey要如何设计后续会整理相关的文章做进一步的描述。这里大家只要有一个概念就是Rowkey的设计极为重要。&lt;/p&gt;

&lt;p&gt;rowkey 行键可以是任意字符串(最大长度是 &lt;strong&gt;64KB&lt;/strong&gt;，实际应用中长度一般为 10-100bytes)，最好是 16。在 HBase 内部，rowkey 保存为字节数组。&lt;strong&gt;HBase 会对表中的数据按照 rowkey 排序 (字典顺序)&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;column的概念&quot;&gt;&lt;strong&gt;Column的概念&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;列。类似于MySql的列&lt;/p&gt;

&lt;h3 id=&quot;columnfamily的概念&quot;&gt;&lt;strong&gt;ColumnFamily的概念&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;列族，HBase引入的概念。&lt;/p&gt;

&lt;p&gt;Hbase表创建的时候就必须指定列族，就像关系型数据库创建的时候必须制定具体的列一样。&lt;/p&gt;

&lt;p&gt;Hbase通过列族划分数据的存储，列族下面可以包含任意多的列，实现灵活的数据存取。就像是家族的概念，我们知道一个家族是由于很多个的家庭组成的。列族也类似，列族是由一个一个的列组成（任意多）。&lt;/p&gt;

&lt;p&gt;Hbase的列族不是越多越好，官方推荐的是列族最好小于或者等于3。我们使用的场景一般是1个列族。&lt;/p&gt;

&lt;h3 id=&quot;timestamp的概念&quot;&gt;&lt;strong&gt;TimeStamp的概念&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;TimeStamp是HBase实现多版本存储的关键。在HBase中通过不同的TimeStamp来标识相同rowkey行对应的不同版本的数据。&lt;/p&gt;

&lt;p&gt;Hbase中通过rowkey和columns确定的一个存储单元称为Cell。每一个Cell都保存蛰同一个数据的多个版本。版本通过时间戳来索引。时间戳的类型是64位整型。时间戳可以由Hbase自动生成，也可以添加数据的时候显示填写。Hbase自动生成的时间戳精确到毫秒的当前系统时间。时间戳也可以由客户显现赋值，为了避免数据版本冲突 ，要保证生成唯一性的时间戳。每个Cell中，不同版本的数据按照时间进行倒序排列，最新的数据在最上面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HBase给我们提供了两种数据版本回收方式：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;保存数据的最后N个版本&lt;/li&gt;
  &lt;li&gt;保存最近一段时间内的版本（设置数据的生命周期TTL）&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;单元格cell&quot;&gt;&lt;strong&gt;单元格(Cell)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;由{rowkey,column(=+),value}唯一确定的单元。Cell中的数据是没有数据类型，全部通过字节码进行存储&lt;/p&gt;

&lt;h2 id=&quot;hbase基础操作&quot;&gt;HBase基础操作&lt;/h2&gt;

&lt;h3 id=&quot;启动shell命令界面hbase-shell&quot;&gt;&lt;strong&gt;启动shell命令界面：hbase shell&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919151244642.png&quot; alt=&quot;image-20210919151244642&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;查看命令帮助文档help&quot;&gt;查看命令帮助文档：help&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;命令格式1:help  		在shell窗口输入help，按下回车，将现实所有命令信息&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/pictures/image-20210919150457322.png&quot; alt=&quot;image-20210919150457322&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;命令格式1: help  ‘命令’     例如：查看create命令的说明，输入： help ‘create’&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/pictures/image-20210919150618063.png&quot; alt=&quot;image-20210919150618063&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;退出shell界面命令quit或exit&quot;&gt;&lt;strong&gt;退出shell界面命令：quit或exit&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919151201172.png&quot; alt=&quot;image-20210919151201172&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建表命令create&quot;&gt;&lt;strong&gt;创建表命令：create&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;命令格式1:create ‘表名称’,’列族1’,’列族2’,….&lt;/p&gt;

    &lt;p&gt;例如 ：创建 表名称 为 student ，列 族 1 为 base_info,列族 2 为 class_info, 列族 3 为other_info 的表。&lt;/p&gt;

    &lt;p&gt;输入命令：create ‘student’,’base_info’,’class_info’,’other_info’ 按回车&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/pictures/image-20210919163540296.png&quot; alt=&quot;image-20210919163540296&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;create ‘表名称’, {NAME =&amp;gt; ‘列族 1’}, {NAME =&amp;gt; ‘列族 2’}, {NAME =&amp;gt; ‘列族 3’,……}&lt;/p&gt;

    &lt;p&gt;例如：创建表名称为 school，列族 1 为 base_info，列族 2 为 teacher_info，列族 3 为 student_info 的表。&lt;/p&gt;

    &lt;p&gt;输入命令 ： create ‘school’, {NAME =&amp;gt; ‘base_info’}, {NAME =&amp;gt; ‘teacher_info’}, {NAME =&amp;gt; ‘student_info’}
&lt;img src=&quot;/pictures/image-20210919163801825.png&quot; alt=&quot;image-20210919163801825&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;列出所有表命令list&quot;&gt;&lt;strong&gt;列出所有表命令：list&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919164326389.png&quot; alt=&quot;image-20210919164326389&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;查看表结构信息命令describe-或-desc&quot;&gt;&lt;strong&gt;查看表结构信息命令：describe 或 desc&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919164429083.png&quot; alt=&quot;image-20210919164429083&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;查看表数据命令scan&quot;&gt;&lt;strong&gt;查看表数据命令：scan&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919164742240.png&quot; alt=&quot;image-20210919164742240&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;插入修改或更新数据命令put&quot;&gt;&lt;strong&gt;插入、修改或更新数据命令：put&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Hbase 修改或者更新数据实质上也是添加新数据，只是旧版本的数据没有被显示出来或者 已经被清除。&lt;/p&gt;

&lt;p&gt;插入数据命令格式：put ‘表名’，‘行值’，‘列族：列名’，‘数据’&lt;/p&gt;

&lt;p&gt;例如 1：向表 stduent 中行 1，列族 base_info 加入列 name，添加数据 wucunjian&lt;/p&gt;

&lt;p&gt;输入命令： put ‘student’,’1’,’base_info:name’,wucunjian’&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919183614883.png&quot; alt=&quot;image-20210919183614883&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加完成的效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919183713881.png&quot; alt=&quot;image-20210919183713881&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;例如 2：向表 stduent 中行 1，列族 class_info 加入列 grade，添加数据 2021&lt;/p&gt;

&lt;p&gt;输入命令： put ‘student’,’1’,’class_info:grade’,’2021’ 按回车，显示结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919183836994.png&quot; alt=&quot;image-20210919183836994&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加完成的效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919183930315.png&quot; alt=&quot;image-20210919183930315&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;获取某一行数据命令get&quot;&gt;&lt;strong&gt;获取某一行数据命令：get&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;命令格式 1：get ‘表名’,’行’&lt;/p&gt;

&lt;p&gt;例如：查看表 stduent 中行 1 的数据&lt;/p&gt;

&lt;p&gt;输入命令：get ‘student’,’1’ 按回车，显示结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919184348522.png&quot; alt=&quot;image-20210919184348522&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;命令格式 2：get ‘表名’,’行’,’列族:列’&lt;/p&gt;

&lt;p&gt;例如：查看表 stduent 中行 1，列族 base_info 中列 name 的数据&lt;/p&gt;

&lt;p&gt;输入命令：get ‘student’,’1’ , ‘base_info:name’ 按回车，显示结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919184441839.png&quot; alt=&quot;image-20210919184441839&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;命令格式 3：get ‘表名’,’行’,{COLUMN=&amp;gt;’列族’,VERSIONS=&amp;gt;版本数 n} 获取某一行的某个列族最新的 n 个版本数据。&lt;/p&gt;

&lt;p&gt;列如：获取 student 表行 1，列族 class_info 最新 4 个版本的数据&lt;/p&gt;

&lt;p&gt;输入命令：get ‘student’,1,{COLUMN=&amp;gt;’class_info’,VERSIONS=&amp;gt;4}&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919215426919.png&quot; alt=&quot;image-20210919215426919&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;删除制定单元格的数据命令delete&quot;&gt;&lt;strong&gt;删除制定单元格的数据命令：delete&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;命令格式：delete ‘表’，‘行’，‘列’，时间戳&lt;/p&gt;

&lt;p&gt;例如：删除 student 表行 1，列族 base_info 中 name 的数据&lt;/p&gt;

&lt;p&gt;输入命令：delete ‘student’,’2’,’class_info:grade’,1632071669244&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919215136765.png&quot; alt=&quot;image-20210919215136765&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;执行结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919223451510.png&quot; alt=&quot;image-20210919223451510&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;修改表结构，让字段存储三个版本信息&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919214500796.png&quot; alt=&quot;image-20210919214500796&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;执行结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919214809497.png&quot; alt=&quot;image-20210919214809497&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;统计表中的行数命令count&quot;&gt;&lt;strong&gt;统计表中的行数命令：count&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;命令格式：count ‘表名’&lt;/p&gt;

&lt;p&gt;例如：查看 studen 表的行数&lt;/p&gt;

&lt;p&gt;输入命令：count ‘student’结果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919225149837.png&quot; alt=&quot;image-20210919225149837&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;清空表数据命令truncate&quot;&gt;&lt;strong&gt;清空表数据命令：truncate&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;命令格式：truncate ‘表名’&lt;/p&gt;

&lt;p&gt;例如：清空表 tb2 的数据&lt;/p&gt;

&lt;p&gt;输入命令：truncate ‘tb2’，命令执行前后用 scan 查看表数据，如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/image-20210919225559773.png&quot; alt=&quot;image-20210919225559773&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;</content><author><name>WuCunJian</name></author><summary type="html">HBase 是 BigTable 的开源（源码使用 Java 编写）版本。是 Apache Hadoop 的数据库，是建立在 HDFS 之上，被设计用来提供高可靠性、高性能、列存储、可伸缩、多版本的 NoSQL 的分布式数据存储系统，实现对大型数据的实时、随机的读写访问。</summary></entry></feed>